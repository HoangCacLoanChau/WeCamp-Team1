{
	"info": {
		"_postman_id": "4b7e8a83-5647-4e91-b322-0d4b447975f7",
		"name": "Missing token",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "47948252",
		"_collection_link": "https://linh-nhi-s-team.postman.co/workspace/Team-Workspace~a2e0114e-98cc-4b1b-8a3d-06a5e2667396/collection/47948252-4b7e8a83-5647-4e91-b322-0d4b447975f7?action=share&source=collection_link&creator=47948252"
	},
	"item": [
		{
			"name": "GP_02 - Get Profile failed - missing token",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.remove(\"Authorization\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {\r",
							"  pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"// 2) Parse JSON an toàn\r",
							"let jsonData = {};\r",
							"try { jsonData = pm.response.json(); } catch (e) {}\r",
							"\r",
							"// 3) Có trường message dạng string\r",
							"pm.test(\"Response has error message\", function () {\r",
							"  pm.expect(jsonData).to.have.property(\"message\");\r",
							"  pm.expect(jsonData.message).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"// 4) Đúng thông điệp\r",
							"pm.test(\"Error message is 'Not authorized, no token'\", function () {\r",
							"  pm.expect(jsonData.message).to.eql(\"Not authorized, no token\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5000/api/users/profile",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"users",
						"profile"
					]
				}
			},
			"response": []
		},
		{
			"name": "UP_02 - Update profles failed - missing token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(401);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"pm.test(\"Response body has message property\", function () {\r",
							"    pm.expect(response).to.have.property(\"message\");\r",
							"    pm.expect(response.message).to.equal(\"Not authorized, no token\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response body has stack property\", function () {\r",
							"    pm.expect(response).to.have.property(\"stack\");\r",
							"    pm.expect(response.stack).to.be.a('string');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"string\",\r\n  \"name\": \"string\"\r\n }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/api/users/profile",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"users",
						"profile"
					]
				}
			},
			"response": []
		},
		{
			"name": "GAU_03 - Get all Users failed - missing token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(401);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body contains message: Not authorized, no token\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response.message).to.exist;\r",
							"    pm.expect(response.message).to.be.a('string');\r",
							"    pm.expect(response.message).to.equal(\"Not authorized, no token\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response body contains stack\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response.stack).to.exist;\r",
							"    pm.expect(response.stack).to.be.a('string');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5000/api/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		}
	]
}