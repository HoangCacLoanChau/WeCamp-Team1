{
	"info": {
		"_postman_id": "a53dc896-14a9-48ee-a2ed-821376d23e18",
		"name": "WeCamp Proshop",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "47823255"
	},
	"item": [
		{
			"name": "Register new user",
			"item": [
				{
					"name": "SU_01 - Successful register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Tests for the POST request to create a new user",
									"// Check if the response status code is 201 (Created)",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"// Check if the response body contains the expected properties and types",
									"let jsonData = pm.response.json();",
									"pm.test(\"Response has _id property type string\", function () {",
									"    pm.expect(jsonData).to.have.property(\"_id\");",
									"    pm.expect(jsonData._id).to.be.a(\"string\");",
									"});",
									"pm.test(\"Response has name property type string\", function () {",
									"    pm.expect(jsonData).to.have.property(\"name\");",
									"    pm.expect(jsonData.name).to.be.a(\"string\");",
									"});",
									"pm.test(\"Response has email property type string\", function () {",
									"    pm.expect(jsonData).to.have.property(\"email\");",
									"    pm.expect(jsonData.email).to.be.a(\"string\");",
									"});",
									"pm.test(\"Response has isAdmin property type boolean\", function () {",
									"    pm.expect(jsonData).to.have.property(\"isAdmin\");",
									"    pm.expect(jsonData.isAdmin).to.be.a(\"boolean\");",
									"});",
									"// Save deleteId for next request to test delete user endpoint",
									"pm.environment.set(\"deleteId\", jsonData._id);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Tạo email random để không bị trùng",
									"pm.variables.set(\"randomEmail\", `shizuka_${Date.now()}@gmail.com`);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Shizuka\",\n    \"email\": \"{{randomEmail}}\",\n    \"password\": \"Password@123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "SU_02 .1 - Email contain  periods '.'",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"// Check if the response body contains the expected properties and types",
									"let jsonData = pm.response.json();",
									"pm.test(\"Response has _id property type string\", function () {",
									"    pm.expect(jsonData).to.have.property(\"_id\");",
									"    pm.expect(jsonData._id).to.be.a(\"string\");",
									"});",
									"pm.test(\"Response has name property type string\", function () {",
									"    pm.expect(jsonData).to.have.property(\"name\");",
									"    pm.expect(jsonData.name).to.be.a(\"string\");",
									"});",
									"pm.test(\"Response has email property type string\", function () {",
									"    pm.expect(jsonData).to.have.property(\"email\");",
									"    pm.expect(jsonData.email).to.be.a(\"string\");",
									"});",
									"pm.test(\"Response has isAdmin property type boolean\", function () {",
									"    pm.expect(jsonData).to.have.property(\"isAdmin\");",
									"    pm.expect(jsonData.isAdmin).to.be.a(\"boolean\");",
									"});",
									"",
									"// Save deleteId for next request to test delete user endpoint",
									"pm.environment.set(\"deleteId2\", jsonData._id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"randomEmailWithPeriods\", `shizu.ka_${Date.now()}@exemple.com`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\n \"name\": \"Shizuka\",\n \"email\": \"{{randomEmailWithPeriods}}\",\n \"password\": \"Another@123\"\n }\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "SU_02 .2 - Email contain  hyphen '-'",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"// Check if the response body contains the expected properties and types",
									"let jsonData = pm.response.json();",
									"pm.test(\"Response has _id property type string\", function () {",
									"    pm.expect(jsonData).to.have.property(\"_id\");",
									"    pm.expect(jsonData._id).to.be.a(\"string\");",
									"});",
									"pm.test(\"Response has name property type string\", function () {",
									"    pm.expect(jsonData).to.have.property(\"name\");",
									"    pm.expect(jsonData.name).to.be.a(\"string\");",
									"});",
									"pm.test(\"Response has email property type string\", function () {",
									"    pm.expect(jsonData).to.have.property(\"email\");",
									"    pm.expect(jsonData.email).to.be.a(\"string\");",
									"});",
									"pm.test(\"Response has isAdmin property type boolean\", function () {",
									"    pm.expect(jsonData).to.have.property(\"isAdmin\");",
									"    pm.expect(jsonData.isAdmin).to.be.a(\"boolean\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"randomEmailWithHyphen\", `shizuka_${Date.now()}@e-xemple.com`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n \"name\": \"Shizuka\",\n \"email\": \"{{randomEmailWithHyphen}}\",\n \"password\": \"Another@123\"\n }\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "SU_02 .3 - Email contain  underscore '_'",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"// Check if the response body contains the expected properties and types",
									"let jsonData = pm.response.json();",
									"pm.test(\"Response has _id property type string\", function () {",
									"    pm.expect(jsonData).to.have.property(\"_id\");",
									"    pm.expect(jsonData._id).to.be.a(\"string\");",
									"});",
									"pm.test(\"Response has name property type string\", function () {",
									"    pm.expect(jsonData).to.have.property(\"name\");",
									"    pm.expect(jsonData.name).to.be.a(\"string\");",
									"});",
									"pm.test(\"Response has email property type string\", function () {",
									"    pm.expect(jsonData).to.have.property(\"email\");",
									"    pm.expect(jsonData.email).to.be.a(\"string\");",
									"});",
									"pm.test(\"Response has isAdmin property type boolean\", function () {",
									"    pm.expect(jsonData).to.have.property(\"isAdmin\");",
									"    pm.expect(jsonData.isAdmin).to.be.a(\"boolean\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"randomEmailWithUnderscore\", `shizu_ka_${Date.now()}@example.com`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n \"name\": \"Shizuka\",\n \"email\": \"{{randomEmailWithUnderscore}}\",\n \"password\": \"Another@123\"\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "SU_02 .4 - Email contain  underscore '_' in domain",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"// Check if the response body contains the expected properties and types",
									"let jsonData = pm.response.json();",
									"pm.test(\"Response has _id property type string\", function () {",
									"    pm.expect(jsonData).to.have.property(\"_id\");",
									"    pm.expect(jsonData._id).to.be.a(\"string\");",
									"});",
									"pm.test(\"Response has name property type string\", function () {",
									"    pm.expect(jsonData).to.have.property(\"name\");",
									"    pm.expect(jsonData.name).to.be.a(\"string\");",
									"});",
									"pm.test(\"Response has email property type string\", function () {",
									"    pm.expect(jsonData).to.have.property(\"email\");",
									"    pm.expect(jsonData.email).to.be.a(\"string\");",
									"});",
									"pm.test(\"Response has isAdmin property type boolean\", function () {",
									"    pm.expect(jsonData).to.have.property(\"isAdmin\");",
									"    pm.expect(jsonData.isAdmin).to.be.a(\"boolean\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"randomEmailWithUnderscoreInDomain\", `shizuka_${Date.now()}@e_emple.com`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n \"name\": \"Shizuka\",\n \"email\": \"{{randomEmailWithUnderscoreInDomain}}\",\n \"password\": \"Another@123\"\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "SU_03 - Subdomain",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"// Check if the response body contains the expected properties and types",
									"let jsonData = pm.response.json();",
									"pm.test(\"Response has _id property type string\", function () {",
									"    pm.expect(jsonData).to.have.property(\"_id\");",
									"    pm.expect(jsonData._id).to.be.a(\"string\");",
									"});",
									"pm.test(\"Response has name property type string\", function () {",
									"    pm.expect(jsonData).to.have.property(\"name\");",
									"    pm.expect(jsonData.name).to.be.a(\"string\");",
									"});",
									"pm.test(\"Response has email property type string\", function () {",
									"    pm.expect(jsonData).to.have.property(\"email\");",
									"    pm.expect(jsonData.email).to.be.a(\"string\");",
									"});",
									"pm.test(\"Response has isAdmin property type boolean\", function () {",
									"    pm.expect(jsonData).to.have.property(\"isAdmin\");",
									"    pm.expect(jsonData.isAdmin).to.be.a(\"boolean\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"randomEmailWithSubdomain\", `shizuka194_${Date.now()}@example.com.vn`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"name\": \"Shizuka\",\n\"email\": \"{{randomEmailWithSubdomain}}\",\n\"password\": \"Subdomain@123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "SU_04 - Email no '@' symbol",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"pm.test(\"Response has error message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.eql(\"User already exists or invalid data\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"randomEmailNoAt\", `shizuka_${Date.now()}gmail.com`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"name\": \"Shizuka\",\n\"email\": \"{{randomEmailNoAt}}\",\n\"password\": \"Password@123\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "SU_05 - Email no domain",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"pm.test(\"Response has error message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.eql(\"User already exists or invalid data\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"randomEmailNoDomain\", `shizuka194_${Date.now()}@`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"name\": \"Shizuka\",\n\"email\": \"{{randomEmailNoDomain}}\",\n\"password\": \"Password@123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "SU_06 - Email no '.' symbol",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"pm.test(\"Response has error message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.eql(\"User already exists or invalid data\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Tạo email random no dot để không bị trùng",
									"pm.variables.set(\"randomEmailNoPeriods\", `shizuka194_${Date.now()}@gmailcom`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"name\": \"Shizuka\",\n\"email\": \"{{randomEmailNoPeriods}}\",\n\"password\": \"Password@123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "SU_07 - Email contain spacial chatacter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"pm.test(\"Response has error message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.eql(\"User already exists or invalid data\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"randomEmailWithSpecialCharacters\", `shizuka$194_${Date.now()}@gmail.com`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"name\": \"Shizuka\",\n\"email\": \"{{randomEmailWithSpecialCharacters}}\",\n\"password\": \"Password@123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "SU_08 - Email missing characters before '@' symbol",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"pm.test(\"Response has error message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.eql(\"User already exists or invalid data\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"randomEmailNoCharactersBeforeAt\", `_${Date.now()}@gmail.com`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"name\": \"Missing\",\n\"email\": \"{{randomEmailNoCharactersBeforeAt}}\",\n\"password\": \"Password@123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "SU_09 - Email containing eading or traiiling spaces",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"pm.test(\"Response has error message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.eql(\"User already exists or invalid data\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"randomEmailWithEadingTraiilingSpaces\", ` space_${Date.now()}@gmail.com `);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"name\": \"Space\",\n\"email\": \"{{randomEmailWithEadingTraiilingSpaces}}\",\n\"password\": \"Password@123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "SU_10 - Email containing space",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"pm.test(\"Response has error message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.eql(\"User already exists or invalid data\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"randomEmailWithSpace\", `shizuka194 _${Date.now()}@gmail.com`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"name\": \"Shizuka\",\n\"email\": \"{{randomEmailWithSpace}}\", \n\"password\": \"Password@123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "SU_11 - Password less than 8 characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"pm.test(\"Response has error message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.eql(\"User already exists or invalid data\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"randomEmail\", `shizuka123_${Date.now()}@gmail.com`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"name\": \"Shizuka\",\n\"email\": \"{{randomEmail}}\", \n\"password\": \"Pass@23\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "SU_12 - Password no uppercase letters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"pm.test(\"Response has error message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.eql(\"User already exists or invalid data\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"randomEmail\", `nobita_${Date.now()}@gmail.com`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"name\": \"Nobita\",\n\"email\": \"{{randomEmail}}\", \n\"password\": \"password@23\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "SU_13 - Password no lowercase letters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"pm.test(\"Response has error message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.eql(\"User already exists or invalid data\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"randomEmail\", `suneo_${Date.now()}@gmail.com`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"name\": \"Suneo\",\n\"email\": \"{{randomEmail}}\", \n\"password\": \"PASSWORD@123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "SU_14 - Password no number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"pm.test(\"Response has error message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.eql(\"User already exists or invalid data\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"randomEmail\", `doraemon_${Date.now()}@gmail.com`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"name\": \"Doraemon\",\n\"email\": \"{{randomEmail}}\", \n\"password\": \"password@abc\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "SU_15 - Password no special character",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"pm.test(\"Response has error message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.eql(\"User already exists or invalid data\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"randomEmail\", `jaian_${Date.now()}@gmail.com`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"name\": \"Jaian\",\n\"email\": \"{{randomEmail}}\", \n\"password\": \"password123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "SU_16 - Password with sequential/repeated characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"pm.test(\"Response has error message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.eql(\"User already exists or invalid data\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"randomEmail\", `dorami_${Date.now()}@gmail.com`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"name\": \"Dorami\",\n\"email\": \"{{randomEmail}}\", \n\"password\": \"Password@aaaa\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "SU_17 - Common password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"pm.test(\"Response has error message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.eql(\"User already exists or invalid data\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"randomEmail\", `jaiko_${Date.now()}@gmail.com`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"name\": \"Jaiko\",\n\"email\": \"{{randomEmail}}\", \n\"password\": \"iloveyou\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "SU_18 - Password with personal info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"pm.test(\"Response has error message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.eql(\"User already exists or invalid data\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"randomEmail\", `mimi_${Date.now()}@gmail.com`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"name\": \"Mimi\",\n\"email\": \"{{randomEmail}}\", \n\"password\": \"mimi@gmail.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "SU_19 - User already exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"pm.test(\"Response has error message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.eql(\"User already exists\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"paypalhuongtran@gmail.com\",\n  \"name\": \"huong nhom 1\",\n  \"password\": \"Huong@123\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "SU_20 - No Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"pm.test(\"Response has error message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"name\": \"NoEmail\", \n\"password\": \"Noemail@123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "SU_21 - No Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"pm.test(\"Response has error message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"randomEmail\", `nopass_${Date.now()}@gmail.com`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"name\": \"NoPass\",\n\"email\": \"{{randomEmail}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "SU_22 - No Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"pm.test(\"Response has error message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"randomEmail\", `noname_${Date.now()}@gmail.com`);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"email\": \"{{randomEmail}}\", \n\"password\": \"Noname@123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "SU23 - Only email is sent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"pm.test(\"Response has error message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"randomEmail\", `onlyemail_${Date.now()}@gmail.com`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"email\": \"{{randomEmail}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "SU_24 - Only password is sent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"pm.test(\"Response has error message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \n\"password\": \"Onlypass@123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "SU_25 - Only name is sent Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"pm.test(\"Response has error message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"name\": \"Onlyname\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "SU_26 - No Body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"pm.test(\"Response has error message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "SU_27 - Change Content-Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"pm.test(\"Response has error message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"randomEmail\", `contenttype_${Date.now()}@gmail.com`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/plain",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"name\": \"ContentType\",\n\"email\": \"{{randomEmail}}\", \n\"password\": \"Content@123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "SU_28 - Change methos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"pm.test(\"Response has error message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"randomEmail\", `method_${Date.now()}@gmail.com`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"name\": \"Method\",\n\"email\": \"{{randomEmail}}\", \n\"password\": \"Content@123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Authenticate user and get token",
			"item": [
				{
					"name": "SI_01 - Successful login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"// Check if the response body contains the expected properties and types",
									"let jsonData = pm.response.json();",
									"pm.test(\"Response has _id property type string\", function () {",
									"    pm.expect(jsonData).to.have.property(\"_id\");",
									"    pm.expect(jsonData._id).to.be.a(\"string\");",
									"});",
									"pm.test(\"Response has name property type string\", function () {",
									"    pm.expect(jsonData).to.have.property(\"name\");",
									"    pm.expect(jsonData.name).to.be.a(\"string\");",
									"});",
									"pm.test(\"Response has email property type string\", function () {",
									"    pm.expect(jsonData).to.have.property(\"email\");",
									"    pm.expect(jsonData.email).to.be.a(\"string\");",
									"});",
									"pm.test(\"Response has isAdmin property type boolean\", function () {",
									"    pm.expect(jsonData).to.have.property(\"isAdmin\");",
									"    pm.expect(jsonData.isAdmin).to.be.a(\"boolean\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"shizuka194@gmail.com\",\n  \"password\": \"Password@123\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/users/auth",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "SI_02 - Incorrect email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"pm.test(\"Response has error message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.eql(\"Invalid email or password\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"email\": \"194@gmail.com\",\n\"password\": \"Password@123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/users/auth",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "SI_03 - Incorrect password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"pm.test(\"Response has error message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.eql(\"Invalid email or password\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"email\": \"shizuka194@exemple.com.vn\",\n\"password\": \"Domain@123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/users/auth",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "SI_04 - Password is case - sensitive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"pm.test(\"Response has error message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.eql(\"Invalid email or password\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"email\": \"shizuka194@gmail.com\",\n\"password\": \"password@123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/users/auth",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "SI_05 - Email unregistered",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"pm.test(\"Response has error message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.eql(\"Invalid email or password\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"email\": \"unregistered@gmail.com\",\n\"password\": \"PassWord@123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/users/auth",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "SI_06 - Only Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"pm.test(\"Response has error message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.eql(\"Invalid email or password\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"password\": \"Password@123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/users/auth",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "SI_07 - Only email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"pm.test(\"Response has error message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"email\": \"shizuka194@gmail.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/users/auth",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "SI_08 - No body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"pm.test(\"Response has error message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.eql(\"Invalid email or password\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/users/auth",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "SI_09 - Change Content-Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"pm.test(\"Response has error message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.eql(\"Invalid email or password\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/plain",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"email\": \"shizuka194@gmail.com\",\n\"password\": \"Password@123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/users/auth",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "SI_10 - Change Method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"pm.test(\"Response has error message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.eql(\"Not authorized as an admin\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"email\": \"shizuka194@gmail.com\",\n\"password\": \"Password@123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/users/auth",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users",
								"auth"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Logout user/ clear cookie",
			"item": [
				{
					"name": "LO_01 - Successful logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"let jsonData = pm.response.json();",
									"pm.test(\"Response has message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.eql(\"Logged out successfully\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{cookieToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:5000/api/users/logout",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "LO_02 - Invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer invalidToken",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:5000/api/users/logout",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "LO_03 - Without token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:5000/api/users/logout",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "LO_04 - Without authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:5000/api/users/logout",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "LO_05 - Change Content-Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2OGJlOGU5NTkyOGNmZjc1Y2RjM2IxMWIiLCJpYXQiOjE3NTc1NTcwMzAsImV4cCI6MTc2MDE0OTAzMH0.qmtpr9HtVKv34qv4et0y6A-gDXdRKVQsIj_1t7y8Cgs; Max-Age=2592000; Path=/; Expires=Sat, 11 Oct 2025 02:17:10 GMT; HttpOnly; Secure; SameSite=Strict}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "test/plain",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:5000/api/users/logout",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "LO_06 - Change method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{cookieToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:5000/api/users/logout",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users",
								"logout"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"// Gửi request login trước khi chạy request chính",
							"pm.sendRequest({",
							"    url: \"http://localhost:5000/api/users/auth\",",
							"    method: \"POST\",",
							"    header: {",
							"        \"Content-Type\": \"application/json\"",
							"    },",
							"    body: {",
							"        mode: \"raw\",",
							"        raw: JSON.stringify({",
							"            email: \"shizuka194@gmail.com\",",
							"            password: \"Password@123\"",
							"        })",
							"    }",
							"}, function (err, res) {",
							"    if (err) {",
							"        console.error(\"Login request failed:\", err);",
							"    } else {",
							"        // Lấy cookie jwt từ domain localhost",
							"        pm.cookies.jar().get(\"http://localhost:5000\", \"jwt\", function (error, cookie) {",
							"            if (error) {",
							"                console.error(\"Error reading cookie:\", error);",
							"            } else if (cookie) {",
							"                console.log(\"JWT Cookie:\", cookie);",
							"                // Gán cookie jwt vào environment variable \"cookieToken\"",
							"                pm.environment.set(\"cookieToken\", cookie);",
							"            } else {",
							"                console.warn(\"No JWT cookie found!\");",
							"            }",
							"        });",
							"    }",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Admin token",
			"item": [
				{
					"name": "Get admin token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.cookies.jar().get(\"http://localhost:5000\", \"jwt\", function (error, cookie) {\r",
									"    if (error) {\r",
									"        console.error(\"Error reading cookie:\", error);\r",
									"    } else if (cookie) {\r",
									"        console.log(\"JWT Cookie:\", cookie);\r",
									"        // Gán cookie jwt vào environment variable \"adminToken\"\r",
									"        pm.environment.set(\"adminToken\", cookie);\r",
									"    } else {\r",
									"        console.warn(\"No JWT cookie found!\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"admin@email.com\",\r\n    \"password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/users/auth",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "GAU_01 - Get all Users successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"// Check status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"// Validate response structure\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    pm.expect(response).to.be.an('array');\r",
									"});\r",
									"\r",
									"// Loop through each user object and check properties\r",
									"response.forEach(user => {\r",
									"    pm.test(\"User object has required properties\", function () {\r",
									"        pm.expect(user).to.have.property('_id').that.is.a('string');\r",
									"        pm.expect(user).to.have.property('name').that.is.a('string');\r",
									"        pm.expect(user).to.have.property('email').that.is.a('string');\r",
									"        pm.expect(user).to.have.property('password').that.is.a('string');\r",
									"        pm.expect(user).to.have.property('isAdmin').that.is.a('boolean');\r",
									"        pm.expect(user).to.have.property('__v').that.is.a('number');\r",
									"        pm.expect(user).to.have.property('createdAt').that.is.a('string');\r",
									"        pm.expect(user).to.have.property('updatedAt').that.is.a('string');\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:5000/api/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "GBI_01 - Get User by ID successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:5000/api/users/68b03459d49d4a13d84936a6",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users",
								"68b03459d49d4a13d84936a6"
							]
						}
					},
					"response": []
				},
				{
					"name": "GBI_02 - Get User by ID failed - ID not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains error message\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody).to.have.property('message');\r",
									"    pm.expect(responseBody.message).to.be.a('string').that.is.not.empty;\r",
									"    pm.expect(responseBody.message).to.eql(\"User not found\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:5000/api/users/28b03459d48d4a13d84936b5",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users",
								"28b03459d48d4a13d84936b5"
							]
						}
					},
					"response": []
				},
				{
					"name": "UBI_01 - Update by ID successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid structure\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.all.keys('_id', 'name', 'email', 'isAdmin');\r",
									"});\r",
									"\r",
									"pm.test(\"Response properties have correct types\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson._id).to.be.a('string');\r",
									"    pm.expect(responseJson.name).to.be.a('string');\r",
									"    pm.expect(responseJson.email).to.be.a('string');\r",
									"    pm.expect(responseJson.isAdmin).to.be.a('boolean');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"pblinhnhi@gmail.com\",\r\n  \"isAdmin\": false,\r\n  \"name\": \"Linh Nhi 1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/users/68cf8622e8ffc1f40e829981",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users",
								"68cf8622e8ffc1f40e829981"
							]
						}
					},
					"response": []
				},
				{
					"name": "UBI_02 - Update by ID failed with invalid format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"pblinhnhi\",\r\n  \"isAdmin\": false,\r\n  \"name\": \"Linh Nhi\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/users/68cf8622e8ffc1f40e829981",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users",
								"68cf8622e8ffc1f40e829981"
							]
						}
					},
					"response": []
				},
				{
					"name": "UBI_03 - Update by ID successfully with new 'isAdmin' field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () { \r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"shizuka194@gmail.com\",\r\n  \"isAdmin\": true,\r\n  \"name\": \"Shizuka 194\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/users/68cf61b3e8ffc1f40e829929",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users",
								"68cf61b3e8ffc1f40e829929"
							]
						}
					},
					"response": []
				},
				{
					"name": "UBI_04 - Update by ID failed - not found ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"});\r",
									"\r",
									"// Test for expected error response structure\r",
									"pm.test(\"Error response structure\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"// Test for specific error message\r",
									"pm.test(\"Error message is as expected\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.message).to.equal(\"User not found\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"pblinhnhi\",\r\n  \"isAdmin\": true,\r\n  \"name\": \"Linh Nhi\"\r\n}"
						},
						"url": {
							"raw": "http://localhost:5000/api/users/67cf8622e8ffc1f40e829982",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users",
								"67cf8622e8ffc1f40e829982"
							]
						}
					},
					"response": []
				},
				{
					"name": "DBI_01 - Delete by ID successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has message: User removed \", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.have.property(\"message\");\r",
									"    pm.expect(response.message).to.equal(\"User removed\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:5000/api/users/{{deleteId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users",
								"{{deleteId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DBI_02 - Delete by ID failed - not found ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a message property\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.have.property('message');\r",
									"    pm.expect(response.message).to.match(/^User not found .+/);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a stack property\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.have.property('stack');\r",
									"    pm.expect(response.stack).to.match(/^Error: Not Found .+/);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:5000/api/users/?1234567",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users",
								""
							],
							"query": [
								{
									"key": "1234567",
									"value": null
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Non-admin token",
			"item": [
				{
					"name": "Get user token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be JSON\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// Assuming a successful response contains a user object with specific properties\r",
									"pm.test(\"Response should have user object with expected properties\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property(\"_id\");\r",
									"    pm.expect(responseJson).to.have.property(\"name\");\r",
									"    pm.expect(responseJson).to.have.property(\"email\");\r",
									"    pm.expect(responseJson).to.have.property(\"isAdmin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.cookies.jar().get(\"http://localhost:5000\", \"jwt\", function (error, cookie) {\r",
									"    if (error) {\r",
									"        console.error(\"Error reading cookie:\", error);\r",
									"    } else if (cookie) {\r",
									"        console.log(\"JWT Cookie:\", cookie);\r",
									"        // Gán cookie jwt vào environment variable \"userToken\"\r",
									"        pm.environment.set(\"userToken\", cookie);\r",
									"    } else {\r",
									"        console.warn(\"No JWT cookie found!\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"pblinhnhi@gmail.com\",\r\n    \"password\": \"pqh231180\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/users/auth",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "GP_01 - Get Profile successfully",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has Content-Type header\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is a valid JSON\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.be.empty;\r",
									"    pm.expect(() => JSON.parse(pm.response.text())).to.not.throw();\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{userToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:5000/api/users/profile",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "GP_03 - Get Profile failed - invalid token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"401 Unauthorized\", () => pm.response.to.have.status(401));\r",
									"\r",
									"let body = {};\r",
									"try { body = pm.response.json(); } catch(e){}\r",
									"\r",
									"pm.test(\"Message indicates invalid/expired\", () => {\r",
									"    pm.expect(body).to.have.property(\"message\");\r",
									"    pm.expect(body.message).to.eql(\"Not authorized, token failed\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer invalidToken",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "jwt=invalidToken",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:5000/api/users/profile",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "UBI_05 - Update by ID failed - nonAdmin account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(401);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response contains error message\", function () {\r",
									"    pm.expect(response.message).to.exist;\r",
									"    pm.expect(response.message).to.be.a('string');\r",
									"    pm.expect(response.message).to.eql('Not authorized as an admin');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{userToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"john@email.com\",\r\n  \"isAdmin\": false,\r\n  \"name\": \"John đặng\"\r\n}"
						},
						"url": {
							"raw": "http://localhost:5000/api/users/68c99d3abc9486363aeadf9b",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users",
								"68c99d3abc9486363aeadf9b"
							]
						}
					},
					"response": []
				},
				{
					"name": "UP_03 - Update Profile failed - invalid format",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 400 or 422\", () => {\r",
									"  pm.expect([400, 422]).to.include(pm.response.code);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{userToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"New Name\",\r\n    \"email\":\"123\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/users/profile",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "UP_01 - Update Profile successfully",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Lấy token từ Environment (Current Value)\r",
									"const token = pm.environment.get('valid_token');\r",
									"\r",
									"pm.request.headers.upsert({ key: 'Content-Type', value: 'application/json' });\r",
									"\r",
									"if (token && token.trim()) {\r",
									"  pm.request.headers.upsert({ key: 'Authorization', value: `Bearer ${token.trim()}` });\r",
									"} else {\r",
									"  console.warn('[UP_01] valid_token is missing in the active Environment');\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1) Status phải 200 OK\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 2) Content-Type là JSON\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// 3) Parse JSON an toàn\r",
									"let jsonData = {};\r",
									"try { jsonData = pm.response.json(); } catch (e) {}\r",
									"\r",
									"pm.test(\"Response has required fields with correct types\", function () {\r",
									"  pm.expect(jsonData).to.have.property(\"_id\");\r",
									"  pm.expect(jsonData._id).to.be.a(\"string\");\r",
									"\r",
									"  pm.expect(jsonData).to.have.property(\"name\");\r",
									"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
									"\r",
									"  pm.expect(jsonData).to.have.property(\"email\");\r",
									"  pm.expect(jsonData.email).to.be.a(\"string\");\r",
									"\r",
									"  pm.expect(jsonData).to.have.property(\"isAdmin\");\r",
									"  pm.expect(jsonData.isAdmin).to.be.a(\"boolean\");\r",
									"});\r",
									"\r",
									"// 4) So khớp với dữ liệu gửi lên\r",
									"const rawReq = pm.variables.replaceIn(pm.request.body?.raw || \"{}\");\r",
									"let reqBody = {};\r",
									"try { reqBody = JSON.parse(rawReq); } catch (e) {}\r",
									"\r",
									"pm.test(\"Name is updated correctly\", function () {\r",
									"  if (reqBody.name) {\r",
									"    pm.expect(jsonData.name).to.eql(reqBody.name);\r",
									"  }\r",
									"});\r",
									"\r",
									"pm.test(\"Email is updated correctly\", function () {\r",
									"  if (reqBody.email) {\r",
									"    pm.expect(jsonData.email).to.eql(reqBody.email);\r",
									"  }\r",
									"});\r",
									"\r",
									"// 5) Email đúng định dạng cơ bản\r",
									"pm.test(\"Email has valid format\", function () {\r",
									"  const emailRe = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r",
									"  pm.expect(emailRe.test(jsonData.email)).to.be.true;\r",
									"});\r",
									"\r",
									"// (Tuỳ chọn) Đảm bảo Authorization header đã được gửi\r",
									"pm.test(\"Authorization header is present\", function () {\r",
									"  const auth = pm.request.headers.get(\"Authorization\");\r",
									"  pm.expect(auth).to.match(/^Bearer\\s+.+/);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{userToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"New Name\",\r\n  \"email\": \"pblinhnhi@gmail.com\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/users/profile",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "DBI_03 - Delete by ID failed - nonAdmin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is Can not delete admin user\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody).to.have.property(\"message\");\r",
									"    pm.expect(responseBody.message).to.equal(\"Not authorized as an admin\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:5000/api/users/{{deleteId2}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users",
								"{{deleteId2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GAU_02 - Get all Users failed - Non-admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message: Not authorized as an admin\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property(\"message\");\r",
									"    pm.expect(responseJson.message).to.equal(\"Not authorized as an admin\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2OGM5OGZhOWRlNzQ3MDYwYmRmYmM1N2EiLCJpYXQiOjE3NTgxNzA5MTMsImV4cCI6MTc2MDc2MjkxM30.iE-eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2OGM5OWQzYWJjOTQ4NjM2M2FlYWRmOWIiLCJpYXQiOjE3NTgxNjY5NjMsImV4cCI6MTc2MDc1ODk2M30.VS3cjwJ0Ze5VYj_4oefAXiD5H4j5KZ8QCalcLoQ9TsQ",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{userToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:5000/api/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Missing token",
			"item": [
				{
					"name": "GP_02 - Get Profile failed - missing token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.remove(\"Authorization\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"  pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"// 2) Parse JSON an toàn\r",
									"let jsonData = {};\r",
									"try { jsonData = pm.response.json(); } catch (e) {}\r",
									"\r",
									"// 3) Có trường message dạng string\r",
									"pm.test(\"Response has error message\", function () {\r",
									"  pm.expect(jsonData).to.have.property(\"message\");\r",
									"  pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"// 4) Đúng thông điệp\r",
									"pm.test(\"Error message is 'Not authorized, no token'\", function () {\r",
									"  pm.expect(jsonData.message).to.eql(\"Not authorized, no token\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5000/api/users/profile",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "UP_02 - Update profles failed - missing token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(401);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"pm.test(\"Response body has message property\", function () {\r",
									"    pm.expect(response).to.have.property(\"message\");\r",
									"    pm.expect(response.message).to.equal(\"Not authorized, no token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body has stack property\", function () {\r",
									"    pm.expect(response).to.have.property(\"stack\");\r",
									"    pm.expect(response.stack).to.be.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"string\",\r\n  \"name\": \"string\"\r\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/users/profile",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "GAU_03 - Get all Users failed - missing token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains message: Not authorized, no token\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.exist;\r",
									"    pm.expect(response.message).to.be.a('string');\r",
									"    pm.expect(response.message).to.equal(\"Not authorized, no token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains stack\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.stack).to.exist;\r",
									"    pm.expect(response.stack).to.be.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5000/api/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"// Xoá cookie",
							"pm.cookies.jar().clear(\"http://localhost:5000\", function (error) {",
							"    if (error) {",
							"        console.log(\"Error clearing cookies:\", error);",
							"    } else {",
							"        console.log(\"Cookies cleared successfully!\");",
							"    }",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Product admin role",
			"item": [
				{
					"name": "Login as admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    let res = pm.response.json();\r",
									"    pm.expect(res).to.have.property(\"_id\");\r",
									"    const cookies = pm.cookies.get(\"jwt\");\r",
									"    pm.environment.set(\"adminToken\", cookies);\r",
									"    pm.environment.set(\"adminId\", res._id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"admin@email.com\",\r\n    \"password\": \"123456\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}users/auth",
							"host": [
								"{{base_url}}users"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "PO_01 Fetch all products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get all products successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    const res = pm.response.json();",
									"",
									"    // Check that products array exists",
									"    pm.expect(res).to.have.property(\"products\");",
									"    pm.expect(res.products).to.be.an(\"array\");",
									"",
									"    // Optional: check at least one item has expected fields",
									"    if(res.products.length > 0){",
									"        const product = res.products[0];",
									"        pm.expect(product).to.have.all.keys(",
									"            \"_id\", \"user\", \"name\", \"image\", \"brand\", \"category\", ",
									"            \"description\", \"rating\", \"numReviews\", \"price\", ",
									"            \"countInStock\", \"reviews\", \"__v\", \"createdAt\", \"updatedAt\"",
									"        );",
									"    }",
									"",
									"    // Check pagination fields",
									"    pm.expect(res).to.have.property(\"page\");",
									"    pm.expect(res).to.have.property(\"pages\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}products",
							"host": [
								"{{base_url}}products"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "PO_02 Get top 3 highest rated product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get top 3 highest-rated products\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    const res = pm.response.json();\r",
									"\r",
									"    // Ensure response is an array\r",
									"    pm.expect(res).to.be.an(\"array\");\r",
									"    pm.expect(res.length).to.be.at.most(3);\r",
									"\r",
									"    // Check each product contains at least the expected fields\r",
									"    const expectedKeys = [\r",
									"        \"_id\", \"brand\", \"category\", \"countInStock\", \"description\",\r",
									"        \"image\", \"name\", \"numReviews\", \"price\", \"rating\", \"reviews\"\r",
									"    ];\r",
									"\r",
									"    res.forEach(product => {\r",
									"        expectedKeys.forEach(key => {\r",
									"            pm.expect(product).to.have.property(key);\r",
									"        });\r",
									"    });\r",
									"\r",
									"    // Check ratings are in descending order\r",
									"    for (let i = 0; i < res.length - 1; i++) {\r",
									"        pm.expect(res[i].rating).to.be.at.least(res[i+1].rating);\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}products/top",
							"host": [
								"{{base_url}}products"
							],
							"path": [
								"top"
							]
						}
					},
					"response": []
				},
				{
					"name": "PO_03 get 1 product by valid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"[\"_id\", \"user\", \"name\", \"image\", \"brand\", \"category\", \r",
									" \"description\", \"rating\", \"numReviews\", \"price\", \r",
									" \"countInStock\", \"reviews\", \"__v\", \"createdAt\", \"updatedAt\"]\r",
									".forEach(field => pm.expect(response).to.have.property(field));\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}products/{{firstProductId}}",
							"host": [
								"{{base_url}}products"
							],
							"path": [
								"{{firstProductId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PO_04 Get 1 product by invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 Not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response has error message\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message.toLowerCase()).to.include(\"not found\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}products/{{invalidProductId}}",
							"host": [
								"{{base_url}}products"
							],
							"path": [
								"{{invalidProductId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PO_05 Create new review successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse response\r",
									"const response = pm.response.json();\r",
									"\r",
									"// Test status code\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Test response message\r",
									"pm.test(\"Response contains 'Review added' message\", function () {\r",
									"    pm.expect(response).to.have.property(\"message\");\r",
									"    pm.expect(response.message).to.eql(\"Review added\");\r",
									"});\r",
									"\r",
									"// Optional: verify comment and rating in returned product (if response includes product object)\r",
									"if (response.product) {\r",
									"    pm.test(\"Review added to product reviews\", function () {\r",
									"        const reviews = response.product.reviews;\r",
									"        const addedReview = reviews.find(r => r.comment === \"good\" && r.rating === 6);\r",
									"        pm.expect(addedReview).to.not.be.undefined;\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.environment.set(\"reviewedProductId\", response._id);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Tạo product mới để có id mới cho product không có review",
									"pm.sendRequest({",
									"    url: \"http://localhost:5000/api/products\",",
									"    method: \"POST\",",
									"    header: {",
									"        \"Content-Type\": \"application/json\"",
									"    },",
									"    body: {",
									"        mode: \"raw\",",
									"        raw: JSON.stringify({",
									"            \"brand\": \"new brand\",",
									"            \"category\": \"new category\",",
									"            \"countInStock\": 30,",
									"            \"description\": \"new description\",",
									"            \"image\": \"https://www.devicemag.com/wp-content/uploads/2023/04/unlock-my-childs-iphone-1.jpg\",",
									"            \"name\": \"new test product \" + Date.now(),",
									"            \"numReviews\": 0,",
									"            \"price\": 22,",
									"            \"rating\": 0",
									"        })",
									"    }",
									"}, function (err, res) {",
									"    if (err) {",
									"        console.error(\"Create product request failed:\", err);",
									"    } else {",
									"        pm.environment.set(\"freshProductId\", res.json()._id);",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"comment\": \"that ok\",\r\n  \"rating\": 5\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}products/{{freshProductId}}/reviews",
							"host": [
								"{{base_url}}products"
							],
							"path": [
								"{{freshProductId}}",
								"reviews"
							]
						}
					},
					"response": []
				},
				{
					"name": "PO_08 Create review without buying",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse response\r",
									"const response = pm.response.json();\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Response contains 'Not authorized' message\", function () {\r",
									"    pm.expect(response).to.have.property(\"message\");\r",
									"    pm.expect(response.message).to.eql(\"Review added\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Tạo product mới để có id mới cho product không có review",
									"pm.sendRequest({",
									"    url: \"http://localhost:5000/api/products\",",
									"    method: \"POST\",",
									"    header: {",
									"        \"Content-Type\": \"application/json\"",
									"    },",
									"    body: {",
									"        mode: \"raw\",",
									"        raw: JSON.stringify({",
									"            \"brand\": \"new brand\",",
									"            \"category\": \"new category\",",
									"            \"countInStock\": 30,",
									"            \"description\": \"new description\",",
									"            \"image\": \"https://www.devicemag.com/wp-content/uploads/2023/04/unlock-my-childs-iphone-1.jpg\",",
									"            \"name\": \"new test product \" + Date.now(),",
									"            \"numReviews\": 0,",
									"            \"price\": 22,",
									"            \"rating\": 0",
									"        })",
									"    }",
									"}, function (err, res) {",
									"    if (err) {",
									"        console.error(\"Create product request failed:\", err);",
									"    } else {",
									"        pm.environment.set(\"freshProductId\", res.json()._id);",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"comment\": \"I did not buy this thing\",\r\n  \"rating\": 10\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}products/{{freshProductId}}/reviews",
							"host": [
								"{{base_url}}products"
							],
							"path": [
								"{{freshProductId}}",
								"reviews"
							]
						}
					},
					"response": []
				},
				{
					"name": "PO_09 Review that have rating more than 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"// Expected behavior (per BR): rating > 5 should be rejected\r",
									"pm.test(\"Status code should be 400 for rating > 5\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should contain proper error message\", function () {\r",
									"    pm.expect(response).to.have.property(\"message\");\r",
									"    pm.expect(response.message).to.eql(\"Rating must be an integer between 1 and 5\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Tạo product mới để có id mới cho product không có review",
									"pm.sendRequest({",
									"    url: \"http://localhost:5000/api/products\",",
									"    method: \"POST\",",
									"    header: {",
									"        \"Content-Type\": \"application/json\"",
									"    },",
									"    body: {",
									"        mode: \"raw\",",
									"        raw: JSON.stringify({",
									"            \"brand\": \"new brand\",",
									"            \"category\": \"new category\",",
									"            \"countInStock\": 30,",
									"            \"description\": \"new description\",",
									"            \"image\": \"https://www.devicemag.com/wp-content/uploads/2023/04/unlock-my-childs-iphone-1.jpg\",",
									"            \"name\": \"new test product \" + Date.now(),",
									"            \"numReviews\": 0,",
									"            \"price\": 22,",
									"            \"rating\": 0",
									"        })",
									"    }",
									"}, function (err, res) {",
									"    if (err) {",
									"        console.error(\"Create product request failed:\", err);",
									"    } else {",
									"        pm.environment.set(\"freshProductId\", res.json()._id);",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"comment\": \"ok\",\r\n    \"rating\": 9\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}products/{{freshProductId}}/reviews",
							"host": [
								"{{base_url}}products"
							],
							"path": [
								"{{freshProductId}}",
								"reviews"
							]
						}
					},
					"response": []
				},
				{
					"name": "PO_10 Submit review without review or rating",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"// Test for comment required\r",
									"if (pm.request.body.raw.includes('\"comment\": null') || pm.request.body.raw.includes('\"comment\": \"\"')) {\r",
									"    pm.test(\"Comment cannot be null or empty\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"        pm.expect(response).to.have.property(\"message\");\r",
									"        pm.expect(response.message).to.include(\"Path `comment` is required\");\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Tạo product mới để có id mới cho product không có review",
									"pm.sendRequest({",
									"    url: \"http://localhost:5000/api/products\",",
									"    method: \"POST\",",
									"    header: {",
									"        \"Content-Type\": \"application/json\"",
									"    },",
									"    body: {",
									"        mode: \"raw\",",
									"        raw: JSON.stringify({",
									"            \"brand\": \"new brand\",",
									"            \"category\": \"new category\",",
									"            \"countInStock\": 30,",
									"            \"description\": \"new description\",",
									"            \"image\": \"https://www.devicemag.com/wp-content/uploads/2023/04/unlock-my-childs-iphone-1.jpg\",",
									"            \"name\": \"new test product \" + Date.now(),",
									"            \"numReviews\": 0,",
									"            \"price\": 22,",
									"            \"rating\": 0",
									"        })",
									"    }",
									"}, function (err, res) {",
									"    if (err) {",
									"        console.error(\"Create product request failed:\", err);",
									"    } else {",
									"        pm.environment.set(\"freshProductId\", res.json()._id);",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"comment\": \"\",\r\n  \"rating\": 1\r\n}\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}products/{{freshProductId}}/reviews",
							"host": [
								"{{base_url}}products"
							],
							"path": [
								"{{freshProductId}}",
								"reviews"
							]
						}
					},
					"response": []
				},
				{
					"name": "PO_18 Admin can delete a product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Product deleted\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Tạo product mới để có id mới cho product không có review",
									"pm.sendRequest({",
									"    url: \"http://localhost:5000/api/products\",",
									"    method: \"POST\",",
									"    header: {",
									"        \"Content-Type\": \"application/json\"",
									"    },",
									"    body: {",
									"        mode: \"raw\",",
									"        raw: JSON.stringify({",
									"            \"brand\": \"new brand\",",
									"            \"category\": \"new category\",",
									"            \"countInStock\": 30,",
									"            \"description\": \"new description\",",
									"            \"image\": \"https://www.devicemag.com/wp-content/uploads/2023/04/unlock-my-childs-iphone-1.jpg\",",
									"            \"name\": \"new test product \" + Date.now(),",
									"            \"numReviews\": 0,",
									"            \"price\": 22,",
									"            \"rating\": 0",
									"        })",
									"    }",
									"}, function (err, res) {",
									"    if (err) {",
									"        console.error(\"Create product request failed:\", err);",
									"    } else {",
									"        pm.environment.set(\"freshProductId\", res.json()._id);",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Cookie",
								"value": "jwt={{adminToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}products/{{freshProductId}}",
							"host": [
								"{{base_url}}products"
							],
							"path": [
								"{{freshProductId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PO_06 Create new review on non - existing product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse response\r",
									"const response = pm.response.json();\r",
									"\r",
									"// Test status code\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"// Test error message\r",
									"pm.test(\"Response contains 'Product not found' message\", function () {\r",
									"    pm.expect(response).to.have.property(\"message\");\r",
									"    pm.expect(response.message).to.eql(\"Product not found\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}products/{{invalidProductId}}/reviews",
							"host": [
								"{{base_url}}products"
							],
							"path": [
								"{{invalidProductId}}",
								"reviews"
							]
						}
					},
					"response": []
				},
				{
					"name": "PO_07 More review for the same product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse response\r",
									"const response = pm.response.json();\r",
									"\r",
									"// Test status code\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test error message\r",
									"pm.test(\"Response contains 'Product already reviewed' message\", function () {\r",
									"    pm.expect(response).to.have.property(\"message\");\r",
									"    pm.expect(response.message).to.eql(\"Product already reviewed\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"comment\": \"abc\",\r\n    \"rating\":\"5\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}products/{{reviewedProductId}}/reviews",
							"host": [
								"{{base_url}}products"
							],
							"path": [
								"{{reviewedProductId}}",
								"reviews"
							]
						}
					},
					"response": []
				},
				{
					"name": "PO_11 Create new product successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check status code\r",
									"pm.test(\"Status code is 201 OK\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Parse response JSON\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Check returned data values\r",
									"pm.test(\" Product data is correct\", function () {\r",
									"    pm.expect(jsonData.brand).to.eql(\"new brand\");\r",
									"    pm.expect(jsonData.category).to.eql(\"new category\");\r",
									"    pm.expect(jsonData.countInStock).to.eql(30);\r",
									"    pm.expect(jsonData.description).to.eql(\"new description\");\r",
									"    pm.expect(jsonData.image).to.eql(\"https://www.devicemag.com/wp-content/uploads/2023/04/unlock-my-childs-iphone-1.jpg\");\r",
									"    pm.expect(jsonData.name).to.eql(\"new iphone\");\r",
									"    pm.expect(jsonData.numReviews).to.eql(0);\r",
									"    pm.expect(jsonData.price).to.eql(22);\r",
									"    pm.expect(jsonData.rating).to.eql(0);\r",
									"    pm.expect(jsonData.reviews).to.be.an(\"array\").that.is.empty;\r",
									"});\r",
									"pm.environment.set(\"productId\",jsonData._id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "jwt={{adminToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n  \"brand\": \"new brand\",\r\n  \"category\": \"new category\",\r\n  \"countInStock\":30,\r\n  \"description\": \"new description\",\r\n  \"image\": \"https://www.devicemag.com/wp-content/uploads/2023/04/unlock-my-childs-iphone-1.jpg\",\r\n  \"name\": \"new iphone\",\r\n  \"numReviews\": 0,\r\n  \"price\": 22,\r\n  \"rating\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}products",
							"host": [
								"{{base_url}}products"
							]
						}
					},
					"response": []
				},
				{
					"name": "PO_12 Create new product with field null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Admin cannot create product with empty body\", function () {\r",
									"    // Status code should be 400\r",
									"    pm.response.to.have.status(400);\r",
									"    \r",
									"    // Response should contain error message\r",
									"    const res = pm.response.json();\r",
									"    pm.expect(res).to.have.property(\"message\", \"Invalid product data\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "jwt={{adminToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n  \"brand\": null,\r\n  \"category\": null,\r\n  \"countInStock\":null,\r\n  \"description\": null,\r\n  \"image\": null,\r\n  \"name\": null,\r\n  \"numReviews\": null,\r\n  \"price\": null,\r\n  \"rating\":null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}products",
							"host": [
								"{{base_url}}products"
							]
						}
					},
					"response": []
				},
				{
					"name": "PO_14 Admin update product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Admin can update product successfully\", function () {\r",
									"    // Status code should be 200\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    // Response should contain updated product info\r",
									"    const res = pm.response.json();\r",
									"    pm.expect(res).to.have.property(\"_id\", pm.environment.get(\"productId\"));\r",
									"    pm.expect(res).to.have.property(\"name\", \"update name\");\r",
									"    pm.expect(res).to.have.property(\"brand\", \"update brand\");\r",
									"    pm.expect(res).to.have.property(\"category\", \"update category\");\r",
									"    pm.expect(res).to.have.property(\"countInStock\", 10);\r",
									"    pm.expect(res).to.have.property(\"description\", \"update des\");\r",
									"    pm.expect(res).to.have.property(\"price\", 1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"value": "jwt={{adminToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"update name\",\r\n  \"price\": 1000,\r\n  \"image\": \"https://th.bing.com/th/id/OIP.Wg3OCXYBG1uyDLyTF1a19gHaEZ?o=7rm=3&rs=1&pid=ImgDetMain&o=7&rm=3\",\r\n  \"brand\": \"update brand\",\r\n  \"category\": \"update category\",\r\n  \"countInStock\": 10,\r\n  \"description\": \"update des\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}products/{{productId}}",
							"host": [
								"{{base_url}}products"
							],
							"path": [
								"{{productId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PO_15 Amin updadte prodduct with null request body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"// Status code must be 400 Bad Request\r",
									"pm.test(\"Status code is 400 Bad Request\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Response body contains the expected error message\r",
									"pm.test(\"Response contains 'Invalid product data'\", () => {\r",
									"    pm.expect(response).to.have.property(\"message\", \"Invalid product data\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"value": "jwt={{adminToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"brand\": null,\r\n  \"category\": null,\r\n  \"countInStock\": null,\r\n  \"description\":null,\r\n  \"image\": null,\r\n  \"name\": null,\r\n  \"numReviews\": null,\r\n  \"price\": null,\r\n  \"rating\": null\r\n}\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}products/{{productId}}",
							"host": [
								"{{base_url}}products"
							],
							"path": [
								"{{productId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PO_17 Admin cannot update an invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 Not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response contains 'Product not found'\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.include(\"Product not found\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"value": "jwt={{adminToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "file",
							"file": {}
						},
						"url": {
							"raw": "{{base_url}}products/{{invalidProductId}}",
							"host": [
								"{{base_url}}products"
							],
							"path": [
								"{{invalidProductId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PO_20 Admin cannot delete an invalid product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 Not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response has error message\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message.toLowerCase()).to.include(\"not found\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Cookie",
								"value": "jwt={{adminToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}products/{{invalidProductId}}",
							"host": [
								"{{base_url}}products"
							],
							"path": [
								"{{invalidProductId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Product user role",
			"item": [
				{
					"name": "Login as user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    let res = pm.response.json();\r",
									"    pm.expect(res).to.have.property(\"_id\");\r",
									"    const cookies = pm.cookies.get(\"jwt\");\r",
									"    pm.environment.set(\"userToken\", cookies);\r",
									"     pm.environment.set(\"userId\", res._id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n    \"email\": \"john@email.com\",\r\n    \"password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}users/auth",
							"host": [
								"{{base_url}}users"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "PO_01 User fetch all products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get all products successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    const res = pm.response.json();",
									"",
									"    // Check that products array exists",
									"    pm.expect(res).to.have.property(\"products\");",
									"    pm.expect(res.products).to.be.an(\"array\");",
									"",
									"    // Optional: check at least one item has expected fields",
									"    if(res.products.length > 0){",
									"        const product = res.products[0];",
									"        pm.expect(product).to.have.all.keys(",
									"            \"_id\", \"user\", \"name\", \"image\", \"brand\", \"category\", ",
									"            \"description\", \"rating\", \"numReviews\", \"price\", ",
									"            \"countInStock\", \"reviews\", \"__v\", \"createdAt\", \"updatedAt\"",
									"        );",
									"    }",
									"",
									"    // Check pagination fields",
									"    pm.expect(res).to.have.property(\"page\");",
									"    pm.expect(res).to.have.property(\"pages\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}products",
							"host": [
								"{{base_url}}products"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "PO_02 User get top 3 highest rated product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get top 3 highest-rated products\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    const res = pm.response.json();\r",
									"\r",
									"    // Ensure response is an array\r",
									"    pm.expect(res).to.be.an(\"array\");\r",
									"    pm.expect(res.length).to.be.at.most(3);\r",
									"\r",
									"    // Check each product contains at least the expected fields\r",
									"    const expectedKeys = [\r",
									"        \"_id\", \"brand\", \"category\", \"countInStock\", \"description\",\r",
									"        \"image\", \"name\", \"numReviews\", \"price\", \"rating\", \"reviews\"\r",
									"    ];\r",
									"\r",
									"    res.forEach(product => {\r",
									"        expectedKeys.forEach(key => {\r",
									"            pm.expect(product).to.have.property(key);\r",
									"        });\r",
									"    });\r",
									"\r",
									"    // Check ratings are in descending order\r",
									"    for (let i = 0; i < res.length - 1; i++) {\r",
									"        pm.expect(res[i].rating).to.be.at.least(res[i+1].rating);\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}products/top",
							"host": [
								"{{base_url}}products"
							],
							"path": [
								"top"
							]
						}
					},
					"response": []
				},
				{
					"name": "PO_03 User get 1 product by valid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"[\"_id\", \"user\", \"name\", \"image\", \"brand\", \"category\", \r",
									" \"description\", \"rating\", \"numReviews\", \"price\", \r",
									" \"countInStock\", \"reviews\", \"__v\", \"createdAt\", \"updatedAt\"]\r",
									".forEach(field => pm.expect(response).to.have.property(field));\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}products/{{firstProductId}}",
							"host": [
								"{{base_url}}products"
							],
							"path": [
								"{{firstProductId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PO_04 User get 1 product by invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 Not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response has error message\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message.toLowerCase()).to.include(\"not found\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}products/{{invalidProductId}}",
							"host": [
								"{{base_url}}products"
							],
							"path": [
								"{{invalidProductId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PO_13 User cannot create new product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Non-admin cannot create product\", function () {\r",
									"    // Status code should be 401\r",
									"    pm.response.to.have.status(401);\r",
									"\r",
									"    // Response should contain error message\r",
									"    const res = pm.response.json();\r",
									"    pm.expect(res).to.have.property(\"message\", \"Not authorized as an admin\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "jwt={{userToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"brand\": \"new brand\",\r\n    \"category\": \"new category\",\r\n    \"countInStock\": 30,\r\n    \"description\": \"new description\",\r\n    \"image\": \"https://www.devicemag.com/wp-content/uploads/2023/04/unlock-my-childs-iphone-1.jpg\",\r\n    \"name\": \"new iphone\",\r\n    \"numReviews\": 0,\r\n    \"price\": 22,\r\n    \"rating\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}products",
							"host": [
								"{{base_url}}products"
							]
						}
					},
					"response": []
				},
				{
					"name": "PO_16 User cannot update product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"// Status code should be 401 Unauthorized\r",
									"pm.test(\"Status code is 401 Unauthorized\", () => {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"// Response body contains expected message\r",
									"pm.test(\"Non-admin cannot update product\", () => {\r",
									"    pm.expect(response).to.have.property(\"message\", \"Not authorized as an admin\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"value": "jwt={{userToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"brand\": \"string\",\r\n  \"category\": \"string\",\r\n  \"countInStock\": 0,\r\n  \"description\": \"string\",\r\n  \"image\": \"string\",\r\n  \"name\": \"string\",\r\n  \"numReviews\": 0,\r\n  \"price\": 0,\r\n  \"rating\": 0,\r\n  \"reviews\": [\r\n    {\r\n      \"comment\": \"string\",\r\n      \"name\": \"string\",\r\n      \"rating\": 0\r\n    }\r\n  ]\r\n}\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}products/{{productId}}",
							"host": [
								"{{base_url}}products"
							],
							"path": [
								"{{productId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PO_19 User cannot delete a product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"pm.test(\"Status code is 401 Unauthorized\", () => {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Non-admin cannot delete product\", () => {\r",
									"    pm.expect(response).to.have.property(\"message\", \"Not authorized as an admin\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Cookie",
								"value": "jwt={{userToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}products/{{productId}}",
							"host": [
								"{{base_url}}products"
							],
							"path": [
								"{{productId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Order admin role",
			"item": [
				{
					"name": "Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const cookie = pm.cookies.get(\"jwt\");\r",
									"pm.environment.set(\"adminToken\", cookie);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"admin@email.com\",\r\n    \"password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}users/auth",
							"host": [
								"{{base_url}}users"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "OD-01 Get all orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 OK\", () => pm.response.to.have.status(200));\r",
									"const data = pm.response.json();\r",
									"pm.test(\"Body is array\", () => pm.expect(Array.isArray(data)).to.be.true);\r",
									"pm.test(\"Order shape (spot-check)\", () => {\r",
									"  const o = data[0] || {};\r",
									"  pm.expect(o).to.have.property(\"_id\");\r",
									"  pm.expect(o).to.have.property(\"orderItems\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}orders",
							"host": [
								"{{base_url}}orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "OD-02 Get orders when no existing order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"404 Not Found\", () => pm.response.to.have.status(404));\r",
									"const data = pm.response.json();\r",
									"pm.test(\"Error message is correct\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"Order not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}orders",
							"host": [
								"{{base_url}}orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "OD-04 Create new order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"201 Created\", () => pm.expect([200,201]).to.include(pm.response.code));\r",
									"const o = pm.response.json();\r",
									"pm.environment.set(\"orderId\", o._id || \"\");\r",
									"pm.test(\"Saved orderId\", () => pm.expect(pm.environment.get(\"orderId\")).to.not.eql(\"\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"orderItems\": [\r\n    {\r\n      \"_id\": \"68b03459d49d4a13d84936ab\",\r\n      \"name\": \"iPhone 13 Pro 256GB Memory\",\r\n      \"image\": \"/images/phone.jpg\",\r\n      \"qty\": 1\r\n    }\r\n  ],\r\n  \"shippingAddress\": {\r\n    \"address\": \"123 Street\",\r\n    \"city\": \"HCMC\",\r\n    \"postalCode\": \"70000\",\r\n    \"country\": \"Vietnam\"\r\n  },\r\n  \"paymentMethod\": \"PayPal\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}orders",
							"host": [
								"{{base_url}}orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "OD-05 Create new order with invalid product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"500 Internal Server Error\", () => pm.response.to.have.status(500));\r",
									"const data = pm.response.json();\r",
									"pm.test(\"Error message is correct\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"Cannot read properties of undefined\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"orderItems\": [\r\n        {\r\n            \"_id\": \"68a03459d49d4a13d84936ac\",\r\n            \"name\": \"iPhone 13 Pro 256GB Memory\",\r\n            \"image\": \"/images/phone.jpg\",\r\n            \"qty\": 1\r\n        }\r\n    ],\r\n    \"shippingAddress\": {\r\n        \"address\": \"123 Street\",\r\n        \"city\": \"HCMC\",\r\n        \"postalCode\": \"70000\",\r\n        \"country\": \"Vietnam\"\r\n    },\r\n    \"paymentMethod\": \"PayPal\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}orders",
							"host": [
								"{{base_url}}orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "OD-06 Create new order without order items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"400 Bad Request\", () => pm.response.to.have.status(400));\r",
									"const data = pm.response.json();\r",
									"pm.test(\"Error message is correct\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"No order items\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"orderItems\": [],\r\n    \"shippingAddress\": {\r\n        \"address\": \"123 Street\",\r\n        \"city\": \"HCMC\",\r\n        \"postalCode\": \"70000\",\r\n        \"country\": \"Vietnam\"\r\n    },\r\n    \"paymentMethod\": \"PayPal\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}orders",
							"host": [
								"{{base_url}}orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "OD-12 Update order to delivered successfull",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 OK\", () => pm.response.to.have.status(200));",
									"const data = pm.response.json();",
									"pm.test(\"Return response with expected properties\", () => {",
									"  pm.expect(data).to.have.property(\"_id\");",
									"  pm.expect(data).to.have.property(\"orderItems\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{base_url}}orders/{{orderId}}/deliver",
							"host": [
								"{{base_url}}orders"
							],
							"path": [
								"{{orderId}}",
								"deliver"
							]
						}
					},
					"response": []
				},
				{
					"name": "OD-13 Update order to delivered non exist id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"404 Not Found\", () => pm.response.to.have.status(404));\r",
									"const data = pm.response.json();\r",
									"pm.test(\"Error message is correct\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"Order not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{base_url}}orders/{{nonexistID}}/deliver",
							"host": [
								"{{base_url}}orders"
							],
							"path": [
								"{{nonexistID}}",
								"deliver"
							]
						}
					},
					"response": []
				},
				{
					"name": "OD-14 Update order to delivered invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"500 Internal Server Error\", () => pm.response.to.have.status(500));\r",
									"const data = pm.response.json();\r",
									"pm.test(\"Error message is correct\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"Cast to ObjectId failed\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{base_url}}orders/{{invalidID}}/deliver",
							"host": [
								"{{base_url}}orders"
							],
							"path": [
								"{{invalidID}}",
								"deliver"
							]
						}
					},
					"response": []
				},
				{
					"name": "OD-15 Update order to delivered again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"500 Internal Server Error\", () => pm.response.to.have.status(500));\r",
									"const data = pm.response.json();\r",
									"pm.test(\"Error message is correct\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"already delivered\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{base_url}}/orders/68b02426634c5860dc299a82/deliver",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orders",
								"68b02426634c5860dc299a82",
								"deliver"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Order customer role",
			"item": [
				{
					"name": "Customer Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const cookie = pm.cookies.get(\"jwt\");\r",
									"pm.environment.set(\"customerToken\", cookie);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"capstone.test@gmail.com\",\r\n    \"password\": \"Password@123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}users/auth",
							"host": [
								"{{base_url}}users"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "OD-04 Customer create new order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"201 Created\", () => pm.expect([200,201]).to.include(pm.response.code));\r",
									"const o = pm.response.json();\r",
									"pm.environment.set(\"orderId\", o._id || \"\");\r",
									"pm.test(\"Saved orderId\", () => pm.expect(pm.environment.get(\"orderId\")).to.not.eql(\"\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"orderItems\": [\r\n    {\r\n      \"_id\": \"68b03459d49d4a13d84936ab\",\r\n      \"name\": \"iPhone 13 Pro 256GB Memory\",\r\n      \"image\": \"/images/phone.jpg\",\r\n      \"qty\": 1\r\n    }\r\n  ],\r\n  \"shippingAddress\": {\r\n    \"address\": \"123 Street\",\r\n    \"city\": \"HCMC\",\r\n    \"postalCode\": \"70000\",\r\n    \"country\": \"Vietnam\"\r\n  },\r\n  \"paymentMethod\": \"PayPal\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}orders",
							"host": [
								"{{base_url}}orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "OD-03 Customer get all orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"401 Unauthorized\", () => pm.response.to.have.status(401));\r",
									"const data = pm.response.json();\r",
									"pm.test(\"Error message is correct\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"Not authorized\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{customerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}orders",
							"host": [
								"{{base_url}}orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "OD-07 Get logged-in user orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 OK\", () => pm.response.to.have.status(200));\r",
									"const data = pm.response.json();\r",
									"pm.test(\"Body is array\", () => pm.expect(Array.isArray(data)).to.be.true);\r",
									"pm.test(\"Order shape (spot-check)\", () => {\r",
									"  const o = data[0] || {};\r",
									"  pm.expect(o).to.have.property(\"_id\");\r",
									"  pm.expect(o).to.have.property(\"orderItems\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{customerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}orders/mine",
							"host": [
								"{{base_url}}orders"
							],
							"path": [
								"mine"
							]
						}
					},
					"response": []
				},
				{
					"name": "OD-08 Invalid path get logged-in user order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"500 Internal Server Error\", () => pm.response.to.have.status(500));\r",
									"const data = pm.response.json();\r",
									"pm.test(\"Error message is correct\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"Cast to ObjectId failed\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/orders/myorders",
							"host": [
								"{{url}}"
							],
							"path": [
								"orders",
								"myorders"
							]
						}
					},
					"response": []
				},
				{
					"name": "OD-09 Get order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 OK\", () => pm.response.to.have.status(200));\r",
									"const data = pm.response.json();\r",
									"pm.test(\"ID matches\", () => pm.expect(data._id).to.eql(pm.environment.get(\"orderId\")));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}orders/{{orderId}}",
							"host": [
								"{{base_url}}orders"
							],
							"path": [
								"{{orderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "OD-10 Get order by ID non existed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"404 Not Found\", () => pm.response.to.have.status(404));\r",
									"const data = pm.response.json();\r",
									"pm.test(\"Error message is correct\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"Order not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}orders/{{nonexistID}}",
							"host": [
								"{{base_url}}orders"
							],
							"path": [
								"{{nonexistID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "OD-11 Get order by ID invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"500 Internal Server Error\", () => pm.response.to.have.status(500));\r",
									"const data = pm.response.json();\r",
									"pm.test(\"Error message is correct\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"Cast to ObjectId failed\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}orders/{{invalidID}}",
							"host": [
								"{{base_url}}orders"
							],
							"path": [
								"{{invalidID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "OD-16 Customer update order to delivered",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"401 Unauthorized\", () => pm.response.to.have.status(401));\r",
									"const data = pm.response.json();\r",
									"pm.test(\"Error message is correct\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"Not authorized\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{customerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{base_url}}/orders/{{orderId}}/deliver",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orders",
								"{{orderId}}",
								"deliver"
							]
						}
					},
					"response": []
				},
				{
					"name": "OD-17 Pay for order",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"2MP98974B20581106\",\r\n  \"payer\": {\r\n    \"email_address\": \"capstone.test@gmail.com\"\r\n  },\r\n  \"status\": \"Completed\",\r\n  \"update_time\": \"2025-09-13T16:15:31Z\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/orders/2MP98974B20581106/pay",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"orders",
								"2MP98974B20581106",
								"pay"
							]
						}
					},
					"response": []
				},
				{
					"name": "OD-19 Pay for order used before",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"500 Internal Server Error\", () => pm.response.to.have.status(500));",
									"const data = pm.response.json();",
									"pm.test(\"Error message is correct\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.include(\"Transaction has been used before\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"2MP98974B20581106\",\r\n  \"payer\": {\r\n    \"email_address\": \"capstone.test@gmail.com\"\r\n  },\r\n  \"status\": \"Completed\",\r\n  \"update_time\": \"2025-09-13T16:15:31Z\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/orders/2MP98974B20581106/pay",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"orders",
								"2MP98974B20581106",
								"pay"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}