{
  "info": {
    "_postman_id": "602fcebc-2e35-4763-b18d-77483ec3d402",
    "name": "Product",
    "description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Scripts\" tab**\n\nAdding tests to your requests can help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/fa30ea0a-373d-4545-a668-e7b283cca343/aW1hZ2UucG5n\" alt=\"\" height=\"1530\" width=\"2162\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n    \n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "47921092",
    "_collection_link": "https://wecamp-team-1.postman.co/workspace/Wecamp-Team-1~552d36eb-cb2f-4512-8037-6f922e7689a3/collection/47921092-602fcebc-2e35-4763-b18d-77483ec3d402?action=share&source=collection_link&creator=47921092"
  },
  "item": [
    {
      "name": "0 - Login",
      "item": [
        {
          "name": "0 - Login as admin",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Login successful\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "    let res = pm.response.json();\r",
                  "    pm.expect(res).to.have.property(\"_id\");\r",
                  "    const cookies = pm.cookies.get(\"jwt\");\r",
                  "    pm.environment.set(\"adminToken\", cookies);\r",
                  "    pm.environment.set(\"adminId\", res._id);\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [""],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"email\":\"admin@email.com\",\r\n    \"password\": \"123456\"\r\n}\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}users/auth",
              "host": ["{{base_url}}users"],
              "path": ["auth"]
            }
          },
          "response": []
        },
        {
          "name": "Login as user",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Login successful\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "    let res = pm.response.json();\r",
                  "    pm.expect(res).to.have.property(\"_id\");\r",
                  "    const cookies = pm.cookies.get(\"jwt\");\r",
                  "    pm.environment.set(\"userToken\", cookies);\r",
                  "     pm.environment.set(\"userId\", res._id);\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [""],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "\r\n{\r\n    \"email\": \"john@email.com\",\r\n    \"password\": \"123456\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}users/auth",
              "host": ["{{base_url}}users"],
              "path": ["auth"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "1 - auto create new product",
      "item": [
        {
          "name": "PO_08 create review without buying",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Parse response\r",
                  "const response = pm.response.json();\r",
                  "pm.test(\"Status code is 401 Unauthorized\", function () {\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "pm.test(\"Response contains 'Not authorized' message\", function () {\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response.message).to.eql(\"Not authorized\");\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "bearer 68b014ab7d07fbb7a47830a0",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"comment\": \"I did not buy this thing\",\r\n  \"rating\": 10\r\n}\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}products/{{freshProductId}}/reviews",
              "host": ["{{base_url}}products"],
              "path": ["{{freshProductId}}", "reviews"]
            }
          },
          "response": []
        },
        {
          "name": "PO_09 review that have rating more than 5",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();\r",
                  "\r",
                  "// Expected behavior (per BR): rating > 5 should be rejected\r",
                  "pm.test(\"Status code should be 400 for rating > 5\", function () {\r",
                  "    pm.expect(pm.response.code).to.eql(400);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response should contain proper error message\", function () {\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response.message).to.eql(\"Rating must be an integer between 1 and 5\");\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"comment\": \"ok\",\r\n    \"rating\": 9\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}products/{{freshProductId}}/reviews",
              "host": ["{{base_url}}products"],
              "path": ["{{freshProductId}}", "reviews"]
            }
          },
          "response": []
        },
        {
          "name": "PO_10 submit review without review or rating",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();\r",
                  "\r",
                  "// Test for comment required\r",
                  "if (pm.request.body.raw.includes('\"comment\": null') || pm.request.body.raw.includes('\"comment\": \"\"')) {\r",
                  "    pm.test(\"Comment cannot be null or empty\", function () {\r",
                  "        pm.response.to.have.status(400);\r",
                  "        pm.expect(response).to.have.property(\"message\");\r",
                  "        pm.expect(response.message).to.include(\"Path `comment` is required\");\r",
                  "    });\r",
                  "}\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"comment\": \"\",\r\n  \"rating\": 1\r\n}\r\n\r\n\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}products/{{freshProductId}}/reviews",
              "host": ["{{base_url}}products"],
              "path": ["{{freshProductId}}", "reviews"]
            }
          },
          "response": []
        },
        {
          "name": "PO_18 Admin can delete a product",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Product deleted\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableCookies": true
          },
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "DELETE",
            "header": [
              {
                "key": "Cookie",
                "value": "jwt={{adminToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}products/{{freshProductId}}",
              "host": ["{{base_url}}products"],
              "path": ["{{freshProductId}}"]
            }
          },
          "response": []
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "packages": {},
            "exec": [
              "// Create fresh product if not already set\r",
              "if (!pm.environment.get(\"freshProductId\")) {\r",
              "    const adminToken = pm.environment.get(\"adminToken\");\r",
              "\r",
              "    const createProductRequest = {\r",
              "        url: 'http://localhost:5000/api/products',\r",
              "        method: 'POST',\r",
              "        header: {\r",
              "            'Content-Type': 'application/json',\r",
              "            'Cookie': 'jwt=' + adminToken \r",
              "        },\r",
              "        body: {\r",
              "            mode: 'raw',\r",
              "            raw: JSON.stringify({\r",
              "                name: \"AutoTest Product \" + Date.now(),\r",
              "                brand: \"AutoBrand\",\r",
              "                category: \"Test\",\r",
              "                description: \"This is a test product\",\r",
              "                price: 100,\r",
              "                countInStock: 10,\r",
              "                rating: 0,\r",
              "                numReviews: 0,\r",
              "                image: \"still sample\"\r",
              "            })\r",
              "        }\r",
              "    };\r",
              "\r",
              "    pm.sendRequest(createProductRequest, function (err, res) {\r",
              "        if (!err) {\r",
              "            const product = res.json();\r",
              "            pm.environment.set(\"freshProductId\", product._id);\r",
              "            console.log(\"Created fresh product: \" + product._id);\r",
              "        } else {\r",
              "            console.log(err);\r",
              "        }\r",
              "    });\r",
              "}\r",
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "packages": {},
            "exec": ["pm.environment.unset(\"freshProductId\");\r", ""]
          }
        }
      ]
    },
    {
      "name": "PO_01 Fetch all products",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Get all products successfully\", function () {",
              "    pm.response.to.have.status(200);",
              "",
              "    const res = pm.response.json();",
              "",
              "    // Check that products array exists",
              "    pm.expect(res).to.have.property(\"products\");",
              "    pm.expect(res.products).to.be.an(\"array\");",
              "",
              "    // Optional: check at least one item has expected fields",
              "    if(res.products.length > 0){",
              "        const product = res.products[0];",
              "        pm.expect(product).to.have.all.keys(",
              "            \"_id\", \"user\", \"name\", \"image\", \"brand\", \"category\", ",
              "            \"description\", \"rating\", \"numReviews\", \"price\", ",
              "            \"countInStock\", \"reviews\", \"__v\", \"createdAt\", \"updatedAt\"",
              "        );",
              "    }",
              "",
              "    // Check pagination fields",
              "    pm.expect(res).to.have.property(\"page\");",
              "    pm.expect(res).to.have.property(\"pages\");",
              "});",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [""],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}products",
          "host": ["{{base_url}}products"]
        },
        "description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
      },
      "response": []
    },
    {
      "name": "PO_02 Get top 3 highest rated product",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Get top 3 highest-rated products\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "\r",
              "    const res = pm.response.json();\r",
              "\r",
              "    // Ensure response is an array\r",
              "    pm.expect(res).to.be.an(\"array\");\r",
              "    pm.expect(res.length).to.be.at.most(3);\r",
              "\r",
              "    // Check each product contains at least the expected fields\r",
              "    const expectedKeys = [\r",
              "        \"_id\", \"brand\", \"category\", \"countInStock\", \"description\",\r",
              "        \"image\", \"name\", \"numReviews\", \"price\", \"rating\", \"reviews\"\r",
              "    ];\r",
              "\r",
              "    res.forEach(product => {\r",
              "        expectedKeys.forEach(key => {\r",
              "            pm.expect(product).to.have.property(key);\r",
              "        });\r",
              "    });\r",
              "\r",
              "    // Check ratings are in descending order\r",
              "    for (let i = 0; i < res.length - 1; i++) {\r",
              "        pm.expect(res[i].rating).to.be.at.least(res[i+1].rating);\r",
              "    }\r",
              "});\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}products/top",
          "host": ["{{base_url}}products"],
          "path": ["top"]
        }
      },
      "response": []
    },
    {
      "name": "PO_03 get 1 product by valid ID",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", () => {\r",
              "    pm.response.to.have.status(200);\r",
              "});\r",
              "\r",
              "const response = pm.response.json();\r",
              "[\"_id\", \"user\", \"name\", \"image\", \"brand\", \"category\", \r",
              " \"description\", \"rating\", \"numReviews\", \"price\", \r",
              " \"countInStock\", \"reviews\", \"__v\", \"createdAt\", \"updatedAt\"]\r",
              ".forEach(field => pm.expect(response).to.have.property(field));\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}products/{{firstProductId}}",
          "host": ["{{base_url}}products"],
          "path": ["{{firstProductId}}"]
        }
      },
      "response": []
    },
    {
      "name": "PO_04 Get 1 product by invalid ID",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 404 Not Found\", function () {\r",
              "    pm.response.to.have.status(404);\r",
              "});\r",
              "pm.test(\"Response has error message\", function () {\r",
              "    const jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property(\"message\");\r",
              "    pm.expect(jsonData.message.toLowerCase()).to.include(\"not found\");\r",
              "});\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}products/{{invalidProductId}}",
          "host": ["{{base_url}}products"],
          "path": ["{{invalidProductId}}"]
        }
      },
      "response": []
    },
    {
      "name": "PO_05 Create new review successfully",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Parse response\r",
              "const response = pm.response.json();\r",
              "\r",
              "// Test status code\r",
              "pm.test(\"Status code is 201\", function () {\r",
              "    pm.response.to.have.status(201);\r",
              "});\r",
              "\r",
              "// Test response message\r",
              "pm.test(\"Response contains 'Review added' message\", function () {\r",
              "    pm.expect(response).to.have.property(\"message\");\r",
              "    pm.expect(response.message).to.eql(\"Review added\");\r",
              "});\r",
              "\r",
              "// Optional: verify comment and rating in returned product (if response includes product object)\r",
              "if (response.product) {\r",
              "    pm.test(\"Review added to product reviews\", function () {\r",
              "        const reviews = response.product.reviews;\r",
              "        const addedReview = reviews.find(r => r.comment === \"good\" && r.rating === 6);\r",
              "        pm.expect(addedReview).to.not.be.undefined;\r",
              "    });\r",
              "}\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "bearer 68b014ab7d07fbb7a47830a0",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n  \"comment\": \"that ok\",\r\n  \"rating\": 10\r\n}\r\n",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{base_url}}products/{{freshProductId}}/reviews",
          "host": ["{{base_url}}products"],
          "path": ["{{freshProductId}}", "reviews"]
        }
      },
      "response": []
    },
    {
      "name": "PO_06 Create new review on non - existing product",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Parse response\r",
              "const response = pm.response.json();\r",
              "\r",
              "// Test status code\r",
              "pm.test(\"Status code is 404\", function () {\r",
              "    pm.response.to.have.status(404);\r",
              "});\r",
              "\r",
              "// Test error message\r",
              "pm.test(\"Response contains 'Product not found' message\", function () {\r",
              "    pm.expect(response).to.have.property(\"message\");\r",
              "    pm.expect(response.message).to.eql(\"Product not found\");\r",
              "});\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [],
        "url": {
          "raw": "{{base_url}}products/{{invalidProductId}}/reviews",
          "host": ["{{base_url}}products"],
          "path": ["{{invalidProductId}}", "reviews"]
        }
      },
      "response": []
    },
    {
      "name": "extra for 07",
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"comment\": \"abc\",\r\n    \"rating\":\"5\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{base_url}}products/{{firstProductId}}/reviews",
          "host": ["{{base_url}}products"],
          "path": ["{{firstProductId}}", "reviews"]
        }
      },
      "response": []
    },
    {
      "name": "PO_07 More review for the same product",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Parse response\r",
              "const response = pm.response.json();\r",
              "\r",
              "// Test status code\r",
              "pm.test(\"Status code is 400\", function () {\r",
              "    pm.response.to.have.status(400);\r",
              "});\r",
              "\r",
              "// Test error message\r",
              "pm.test(\"Response contains 'Product already reviewed' message\", function () {\r",
              "    pm.expect(response).to.have.property(\"message\");\r",
              "    pm.expect(response.message).to.eql(\"Product already reviewed\");\r",
              "});\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"comment\": \"abc\",\r\n    \"rating\":\"5\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{base_url}}products/{{firstProductId}}/reviews",
          "host": ["{{base_url}}products"],
          "path": ["{{firstProductId}}", "reviews"]
        }
      },
      "response": []
    },
    {
      "name": "PO_11 create new product successfully",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Check status code\r",
              "pm.test(\"Status code is 201 OK\", function () {\r",
              "    pm.response.to.have.status(201);\r",
              "});\r",
              "\r",
              "// Parse response JSON\r",
              "const jsonData = pm.response.json();\r",
              "\r",
              "// Check returned data values\r",
              "pm.test(\" Product data is correct\", function () {\r",
              "    pm.expect(jsonData.brand).to.eql(\"new brand\");\r",
              "    pm.expect(jsonData.category).to.eql(\"new category\");\r",
              "    pm.expect(jsonData.countInStock).to.eql(30);\r",
              "    pm.expect(jsonData.description).to.eql(\"new description\");\r",
              "    pm.expect(jsonData.image).to.eql(\"https://www.devicemag.com/wp-content/uploads/2023/04/unlock-my-childs-iphone-1.jpg\");\r",
              "    pm.expect(jsonData.name).to.eql(\"new iphone\");\r",
              "    pm.expect(jsonData.numReviews).to.eql(0);\r",
              "    pm.expect(jsonData.price).to.eql(22);\r",
              "    pm.expect(jsonData.rating).to.eql(0);\r",
              "    pm.expect(jsonData.reviews).to.be.an(\"array\").that.is.empty;\r",
              "});\r",
              "pm.environment.set(\"productId\",jsonData._id);"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [""],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableCookies": true
      },
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [
          {
            "key": "Cookie",
            "value": "jwt={{adminToken}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "\r\n{\r\n  \"brand\": \"new brand\",\r\n  \"category\": \"new category\",\r\n  \"countInStock\":30,\r\n  \"description\": \"new description\",\r\n  \"image\": \"https://www.devicemag.com/wp-content/uploads/2023/04/unlock-my-childs-iphone-1.jpg\",\r\n  \"name\": \"new iphone\",\r\n  \"numReviews\": 0,\r\n  \"price\": 22,\r\n  \"rating\": 0\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{base_url}}products",
          "host": ["{{base_url}}products"]
        }
      },
      "response": []
    },
    {
      "name": "PO_12 create new product with field null",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Admin cannot create product with empty body\", function () {\r",
              "    // Status code should be 400\r",
              "    pm.response.to.have.status(400);\r",
              "    \r",
              "    // Response should contain error message\r",
              "    const res = pm.response.json();\r",
              "    pm.expect(res).to.have.property(\"message\", \"Invalid product data\");\r",
              "});\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableCookies": true
      },
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [
          {
            "key": "Cookie",
            "value": "jwt={{adminToken}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "\r\n{\r\n  \"brand\": null,\r\n  \"category\": null,\r\n  \"countInStock\":null,\r\n  \"description\": null,\r\n  \"image\": null,\r\n  \"name\": null,\r\n  \"numReviews\": null,\r\n  \"price\": null,\r\n  \"rating\":null\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{base_url}}products",
          "host": ["{{base_url}}products"]
        }
      },
      "response": []
    },
    {
      "name": "PO_13 user cannot create new product",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Non-admin cannot create product\", function () {\r",
              "    // Status code should be 401\r",
              "    pm.response.to.have.status(401);\r",
              "\r",
              "    // Response should contain error message\r",
              "    const res = pm.response.json();\r",
              "    pm.expect(res).to.have.property(\"message\", \"Not authorized as an admin\");\r",
              "});\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableCookies": true
      },
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [
          {
            "key": "Cookie",
            "value": "jwt={{userToken}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"brand\": \"new brand\",\r\n    \"category\": \"new category\",\r\n    \"countInStock\": 30,\r\n    \"description\": \"new description\",\r\n    \"image\": \"https://www.devicemag.com/wp-content/uploads/2023/04/unlock-my-childs-iphone-1.jpg\",\r\n    \"name\": \"new iphone\",\r\n    \"numReviews\": 0,\r\n    \"price\": 22,\r\n    \"rating\": 0\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{base_url}}products",
          "host": ["{{base_url}}products"]
        }
      },
      "response": []
    },
    {
      "name": "PO_14 Admin update product",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Admin can update product successfully\", function () {\r",
              "    // Status code should be 200\r",
              "    pm.response.to.have.status(200);\r",
              "\r",
              "    // Response should contain updated product info\r",
              "    const res = pm.response.json();\r",
              "    pm.expect(res).to.have.property(\"_id\", pm.environment.get(\"productId\"));\r",
              "    pm.expect(res).to.have.property(\"name\", \"update name\");\r",
              "    pm.expect(res).to.have.property(\"brand\", \"update brand\");\r",
              "    pm.expect(res).to.have.property(\"category\", \"update category\");\r",
              "    pm.expect(res).to.have.property(\"countInStock\", 10);\r",
              "    pm.expect(res).to.have.property(\"description\", \"update des\");\r",
              "    pm.expect(res).to.have.property(\"price\", 1000);\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableCookies": true
      },
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "PUT",
        "header": [
          {
            "key": "Cookie",
            "value": "jwt={{adminToken}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n  \"name\": \"update name\",\r\n  \"price\": 1000,\r\n  \"image\": \"https://th.bing.com/th/id/OIP.Wg3OCXYBG1uyDLyTF1a19gHaEZ?o=7rm=3&rs=1&pid=ImgDetMain&o=7&rm=3\",\r\n  \"brand\": \"update brand\",\r\n  \"category\": \"update category\",\r\n  \"countInStock\": 10,\r\n  \"description\": \"update des\"\r\n}\r\n",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{base_url}}products/{{productId}}",
          "host": ["{{base_url}}products"],
          "path": ["{{productId}}"]
        }
      },
      "response": []
    },
    {
      "name": "PO_15 Amin updadte prodduct with null request body",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "const response = pm.response.json();\r",
              "\r",
              "// Status code must be 400 Bad Request\r",
              "pm.test(\"Status code is 400 Bad Request\", () => {\r",
              "    pm.response.to.have.status(400);\r",
              "});\r",
              "\r",
              "// Response body contains the expected error message\r",
              "pm.test(\"Response contains 'Invalid product data'\", () => {\r",
              "    pm.expect(response).to.have.property(\"message\", \"Invalid product data\");\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableCookies": true
      },
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "PUT",
        "header": [
          {
            "key": "Cookie",
            "value": "jwt={{adminToken}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n  \"brand\": null,\r\n  \"category\": null,\r\n  \"countInStock\": null,\r\n  \"description\":null,\r\n  \"image\": null,\r\n  \"name\": null,\r\n  \"numReviews\": null,\r\n  \"price\": null,\r\n  \"rating\": null\r\n}\r\n\r\n\r\n",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{base_url}}products/{{productId}}",
          "host": ["{{base_url}}products"],
          "path": ["{{productId}}"]
        }
      },
      "response": []
    },
    {
      "name": "PO_16 User cannot update product",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [""],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "const response = pm.response.json();\r",
              "\r",
              "// Status code should be 401 Unauthorized\r",
              "pm.test(\"Status code is 401 Unauthorized\", () => {\r",
              "    pm.response.to.have.status(401);\r",
              "});\r",
              "\r",
              "// Response body contains expected message\r",
              "pm.test(\"Non-admin cannot update product\", () => {\r",
              "    pm.expect(response).to.have.property(\"message\", \"Not authorized as an admin\");\r",
              "});\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableCookies": true
      },
      "request": {
        "method": "PUT",
        "header": [
          {
            "key": "Cookie",
            "value": "jwt={{userToken}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n  \"brand\": \"string\",\r\n  \"category\": \"string\",\r\n  \"countInStock\": 0,\r\n  \"description\": \"string\",\r\n  \"image\": \"string\",\r\n  \"name\": \"string\",\r\n  \"numReviews\": 0,\r\n  \"price\": 0,\r\n  \"rating\": 0,\r\n  \"reviews\": [\r\n    {\r\n      \"comment\": \"string\",\r\n      \"name\": \"string\",\r\n      \"rating\": 0\r\n    }\r\n  ]\r\n}\r\n\r\n\r\n",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{base_url}}products/{{productId}}",
          "host": ["{{base_url}}products"],
          "path": ["{{productId}}"]
        }
      },
      "response": []
    },
    {
      "name": "PO_17 Admin cannot update an invalid id",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 404 Not Found\", function () {\r",
              "    pm.response.to.have.status(404);\r",
              "});\r",
              "pm.test(\"Response contains 'Product not found'\", function () {\r",
              "    const jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property(\"message\");\r",
              "    pm.expect(jsonData.message).to.include(\"Product not found\");\r",
              "});\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableCookies": true
      },
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "PUT",
        "header": [
          {
            "key": "Cookie",
            "value": "jwt={{adminToken}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "file",
          "file": {}
        },
        "url": {
          "raw": "{{base_url}}products/{{invalidProductId}}",
          "host": ["{{base_url}}products"],
          "path": ["{{invalidProductId}}"]
        }
      },
      "response": []
    },
    {
      "name": "PO_19 User cannot delete a product",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "const response = pm.response.json();\r",
              "pm.test(\"Status code is 401 Unauthorized\", () => {\r",
              "    pm.response.to.have.status(401);\r",
              "});\r",
              "pm.test(\"Non-admin cannot delete product\", () => {\r",
              "    pm.expect(response).to.have.property(\"message\", \"Not authorized as an admin\");\r",
              "});\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableCookies": true
      },
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "DELETE",
        "header": [
          {
            "key": "Cookie",
            "value": "jwt={{userToken}}",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{base_url}}products/{{productId}}",
          "host": ["{{base_url}}products"],
          "path": ["{{productId}}"]
        }
      },
      "response": []
    },
    {
      "name": "PO_20 Admin cannot delete an invalid product",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 404 Not Found\", function () {\r",
              "    pm.response.to.have.status(404);\r",
              "});\r",
              "pm.test(\"Response has error message\", function () {\r",
              "    const jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property(\"message\");\r",
              "    pm.expect(jsonData.message.toLowerCase()).to.include(\"not found\");\r",
              "});\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableCookies": true
      },
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "DELETE",
        "header": [
          {
            "key": "Cookie",
            "value": "jwt={{adminToken}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": ""
        },
        "url": {
          "raw": "{{base_url}}products/{{invalidProductId}}",
          "host": ["{{base_url}}products"],
          "path": ["{{invalidProductId}}"]
        }
      },
      "response": []
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    }
  ],
  "variable": [
    {
      "key": "id",
      "value": "1"
    },
    {
      "key": "base_url",
      "value": "https://template.postman-echo.com"
    }
  ]
}
